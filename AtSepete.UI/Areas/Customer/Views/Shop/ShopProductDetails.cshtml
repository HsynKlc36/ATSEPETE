@model IEnumerable<AtSepete.UI.Areas.Customer.Models.ShopVMs.CustomerShopProductDetailsVM>

@{
    ViewData["Title"] = "Ürün Detayları";
    Layout = "_CustomerLayout";
    var shopProductDetail = Model.FirstOrDefault();
    var filterMarketPrice = Model.Select(x => new
    {
        ProductId=x.ProductId,
        ProductPhotoPath = x.ProductPhotoPath,
        ProductPrice = x.ProductPrice,
        ProductName=x.ProductName,
        ProductTitle=x.ProductTitle,
        MarketId=x.MarketId,
        MarketName = x.MarketName,
        ProductUnit=x.ProductUnit,
        ProductQuantity=x.ProductQuantity
    }).ToList();

}
<style>
    .item-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: flex-start;
    }

    .item {
        flex-basis: calc(25% - 10px);
        margin-bottom: 20px;
    }

</style>


<div class="container row">
    <div class="col-lg-4">
    </div>
    <div class="product-image col-lg-4">

        <img src="@shopProductDetail.ProductPhotoPath" alt="@shopProductDetail.ProductName" />

    </div>

    <div class="product-info col-lg-4">

        <h2>@shopProductDetail.ProductName.ToUpper()</h2>

        <input type="hidden" @shopProductDetail.ProductId>
        <input type="hidden" @shopProductDetail.MarketId>

        <p><strong>Ürün Markası:</strong> @shopProductDetail.ProductTitle.ToUpper()</p>
        <p><strong>Ürün Miktarı:</strong> @shopProductDetail.ProductQuantity @shopProductDetail.ProductUnit</p>
        <p><strong>Kategori:</strong> @shopProductDetail.CategoryName</p>

    </div>
</div>
<div class="container row">
    <div class="col-lg-4">
    </div>
    <div class="product-image col-lg-8">

        <h3>Ürün Açıklaması</h3>

        <p>@shopProductDetail.ProductDescription</p>

    </div>
</div>
<div class="container row">
    <div class="col-lg-8">
    </div>
    <div class="item-container product-image col-lg-4">
        <div class="col-lg-12" style="margin-top: 0;">
            <h3 >Tüm Satıcılar</h3>
        </div>
        <div class="row" style="margin-left: -15px;">
            @foreach (var item in filterMarketPrice)
            {
                <div class="item ml-4">
                 
                    <img src="@item.ProductPhotoPath" style="width: 100px; height: 100px;" />
                    <span>@item.MarketName.ToUpper() </span>
                    <p>@item.ProductPrice TL</p>
                    <input type="button" value="Ekle" class="btn btn-primary" style="width:100px; background-color:#f7cdd0; border-color:#f7cdd0;" onclick="addToCart('@item.ProductId', '@item.MarketId', '@item.ProductTitle', '@item.ProductName', '@item.ProductQuantity', '@item.ProductUnit',  '@item.MarketName', '@item.ProductPrice','@item.ProductPhotoPath')" />
                </div>
            }
        </div>
    </div>
</div>


<script>
    function getCartFromLocalStorage() {
        var cartJson = localStorage.getItem('Cart'); 
        return cartJson ? JSON.parse(cartJson) : [];
    }
    function saveCartToLocalStorage(cart) {
        var cartJson = JSON.stringify(cart); 
        localStorage.setItem('Cart', cartJson);
    }

    function addToCart(productId, marketId, productTitle, productName, productQuantity, productUnit, marketName, productPrice, productPhotoPath) {

        var quantity = 1; // Varsayılan olarak eklenen ürünün miktarı 1

        // Local Storage'dan sepet verilerini al
        var cart = getCartFromLocalStorage();

        // Ürünü sepete ekle
        var existingItem = cart.find(item => item.productId === productId && item.marketId === marketId);
        if (existingItem) {
            existingItem.quantity += quantity;
        }
        else {
            cart.push({

                productId: productId,
                marketId: marketId,
                productTitle: productTitle,
                productName: productName,
                productQuantity: productQuantity,
                productUnit: productUnit,
                productPhotoPath: productPhotoPath,
                marketName: marketName,
                productPrice: productPrice,
                quantity: quantity
            });
        }
        // Sepet verilerini Local Storage'a kaydet
        saveCartToLocalStorage(cart);
        updateCartItemCount()
        location.reload();
    }

</script>
<script>
    function getCartFromLocalStorage() {
        var cartJson = localStorage.getItem('Cart');
        var cart = cartJson ? JSON.parse(cartJson) : [];

        // Sepet verilerinin sayısını span elementine yazdır
        document.getElementById('cartItemCount').textContent = cart.length;

        return cart;
    }
</script>

<script>
    function updateCartItemCount() {
        var cart = getCartFromLocalStorage();
        var cartItemCount = cart.length;
    }

</script>
<script>
    window.addEventListener('DOMContentLoaded', function () {
        updateCartItemCount();
    });
</script>

